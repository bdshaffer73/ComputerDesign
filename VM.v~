module VM(in, clk, rst, button0, button1, button2, a, b, c, d, e, f, g);

/*
Top level module. Used to instantiate the next level modules, and do some logic to hook them all together.
*/
input wire [16:0]in;
input wire clk, rst, button0, button1, button2;

wire [31:0]char;

//=======================//

//PC declaration
wire pcrw, pcs;
wire [31:0]pcb, pcout;

PC pc (pcb, pcs, pcout, clk, rw, rst);

//Memory declaration
wire [31:0]memin, memout;
wire [16:0]memaddr;
wire memrw, memaddrs, memins;

MEM mem (memin, memout, memaddr, memrw, clk, rst);

//REGFILE test block
wire [31:0]rfin;
wire [31:0]rfout0, rfout1;
wire [31:0]rfaddr0, rfaddr1;
wire rfrw;

REGFILE rf (rfin, rfout0, rfout1, rfaddr0, rfaddr1, rfrw, clk, rst);

//ALU test block
//ALU does not respond to RST or CLK.
wire [31:0]aluA, aluB, aluO;
wire [7:0]aluinst;

ALU alu (inst, aluA, aluB, aluO);

//========================//

//Logic to set up for Control

//ALU
assign aluA = regout0;
assign aluB = regout1;

//Memory
always @(*) begin
	case(memaddrs)//Mem address switch

		1'd0: begin //Pass-through the pc as usual
			memaddr = pcout;
		end

		1'd1: begin //Pass-through the register for a specific memory allocation
			memaddr = regout0;
		end
	endcase
end

//REGFILE
always @(*) begin
	case(regs)//RegFile input switch

		2'd0: begin //Input the ALU mathematical output
			regin = aluO;
		end

		2'd1: begin //Input a special value from the Control
			regin = regci;
		end
	
		2'd2: begin //Input the memory output
			regin = memout;
		end

		2'd3: begin //Input the RegFile secondary output
			regin = regout1;
		end
	endcase
end

//========================//

wire [31:0]inst;

CONTROL ct (inst, pcrw, pcs, bpc, aluinst, status, regaddr0, regaddr1, regci, regs, regrw, memaddr, memrw, memaddrs, memins, clk, rst);

//========================//

//Logic for testing
/*
//REGFILE testing
//Assign switches to the RF input
assign rfaddr0[3:0] = in[3:0];
assign rfaddr1[3:0] = in[7:4];
assign rfin[3:0] = in[11:8];
assign rfrw = in[15];
assign char[3:0] = RFout0[3:0];
assign char[7:4] = RFout1[3:0];
*/
/*
//ALU testing
assign aluinst = in[7:0];
assign aluA = in[11:8];
assign aluB = in[15:12];
assign char = aluO[3:0];
*/

//========================//
//Output each 32-bit hex code to the display
output wire [7:0]a, b, c, d, e, f, g;

SevenSeg disp0 (char[3:0], a[0], b[0], c[0], d[0], e[0], f[0], g[0]);
SevenSeg disp1 (char[7:4], a[1], b[1], c[1], d[1], e[1], f[1], g[1]);
SevenSeg disp2 (char[11:8], a[2], b[2], c[2], d[2], e[2], f[2], g[2]);
SevenSeg disp3 (char[15:12], a[3], b[3], c[3], d[3], e[3], f[3], g[3]);
SevenSeg disp4 (char[19:16], a[4], b[4], c[4], d[4], e[4], f[4], g[4]);
SevenSeg disp5 (char[23:20], a[5], b[5], c[5], d[5], e[5], f[5], g[5]);
SevenSeg disp6 (char[27:24], a[6], b[6], c[6], d[6], e[6], f[6], g[6]);
SevenSeg disp7 (char[31:28], a[7], b[7], c[7], d[7], e[7], f[7], g[7]);

endmodule
