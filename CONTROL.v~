module CONTROL (inst, pcrw, pcs, pcb, aluinst, status, regaddr0, regaddr1, regci, regs, regrw, memaddr, memrw, memaddrs, memins, clk, rst);

////Setup
//Control wires
input [31:0]inst;
input clk, rst;

//PC wires
output reg pcrw, pcs;
output reg [31:0]pcb;

//ALU wires
output reg [7:0]aluinst;
input wire status;

//Regfile wires
output reg [31:0]regaddr0, regaddr1, regci;
output reg [1:0]regs;
output reg regrw;

//Memory wires
output reg [31:0]memaddr;
output reg memrw, memaddrs, memins;

//--------Logic
/*
//Finite State Machine
reg [7:0]State, NState;
reg [31:0]instFetch;

parameter INPUT = 8'd0,
			RUN = 8'd13,
			FETCH = 8'd1,
			DECODE = 8'd2,
			UPDATE = 8'd3,
			ADD = 8'd4,
			SUB = 8'd5,
			HR = 8'd6,
			HW = 8'd7,
			CP = 8'd8,
			MV = 8'd9,
			BEQ = 8'd10,
			BLT = 8'd11,
			JUMP = 8'd12;

always @(posedge CLOCK_50 or negedge rst) begin
	if(rst == 1'd0) begin
		State <= INPUT;
	end
	else begin
		State <= NState;
	end
end

always @(*) begin
	case(State)

		INPUT: begin
			if(pr) begin
				NState = INPUT;
			end
			else begin
				NState = RUN;
			end
			
			memin[31:28] = 4'd0;
			memin[27:24] = in[15:12];
			memin[23:20] = 4'd0;
			memin[19:16] = in[11:8];
			memin[15:12] = 4'd0;
			memin[11:8] = in[7:4];
			memin[7:4] = 4'd0;
			memin[3:0] = in[3:0];
			
			//prevent latches
			regs = 2'd1;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
			pcs = 1'd0;
		end
		
		RUN: begin
			NState = FETCH;
			pcs = 1'd1;
			out = 32'h1234abcd;
			
			//prevent latches
			memin = 32'd0;
			regs = 2'd1;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
		end
		
		FETCH: begin
			NState = DECODE;
			
			//prevent latches
			pcs = 1'd0;
			regs = 2'd1;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
			memin = 32'd0;
		end
		
		DECODE: begin
			//Determine OP code
			case (instFetch[7:0])
			
			MV: begin
				regs = 2'd3;
				regaddr1 = instFetch[15:8];
				regaddr0 = instFetch[23:16];
				NState = MV;
			end
			
			default: begin
				NState = INPUT;
				regs = 2'd1;
				regaddr0 = 32'd0;
				regaddr1 = 32'd0;
			end
			
			endcase
			
			//prevent latches
			pcs = 1'd0;
			memaddrs = 1'd0;
			memin = 32'd0;
		end
		
		MV: begin
			NState = UPDATE;
			
			//prevent latches
			pcs = 1'd0;
			regs = 2'd1;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
			memin = 32'd0;
		end
	
		UPDATE: begin
			regs = 2'd0;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
			NState = FETCH;
			
			//prevent latches
			pcs = 1'd0;
			memin = 32'd0;
		end

		default: begin
			pcs = 1'd0;
			regs = 2'd1;
			regaddr0 = 32'd0;
			regaddr1 = 32'd0;
			memaddrs = 1'd0;
			memin = 32'd0;
			NState = INPUT;
		end
	endcase
end

always @(posedge CLOCK_50 or negedge rst) begin

	if(rst == 1'd0) begin
		
		//PC reset
		pcrw <= 1'd0;
		bpc <=32'd0;
		
		//Regfile reset
		regci <= 32'd0;
		regrw <= 1'd0;
		
		//Memory reset
		memrw <= 1'd0;
		
	end
	else begin

		case(State)
	
			INPUT: begin
			
				memrw <= 1'd1;
				
				bpc <= 32'd0;
				//prevent latches
				
			end
			
			RUN: begin
				bpc <= 32'd0;
				memrw <= 1'd0;
			end
			
			FETCH: begin
			
				instFetch <= memout;
				
				//prevent latches
				bpc <= 32'd0;
			end

			DECODE: begin
				
				//prevent latches
				
			end

			MV: begin
			
				regrw <= 1'd1;
				
				//prevent latches
				
			end

			UPDATE: begin
				
				pcrw <= 1'd1;
				regci <= 32'd0;
				regrw <= 1'd0;
				memrw <= 1'd0;
				
				//prevent latches
				
			end
				
			default: begin
			
				pcrw <= 1'd0;
				regci <= 32'd0;
				regrw <= 1'd0;
				memrw <= 1'd0;
				
			end
		endcase
	end
end

//output
//always @(*) begin
//	if(!button0 && button1)
//		out = regout0;
//	else
//		out = regout1;
//end
*/
endmodule
